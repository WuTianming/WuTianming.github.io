{"meta":{"title":"WuTianming","subtitle":"I'm not the director.","description":null,"author":"WuTianming","url":"http://wutianming.coding.me"},"pages":[{"title":"about","date":"2016-05-21T15:09:17.000Z","updated":"2016-10-02T06:26:42.044Z","comments":true,"path":"about/index.html","permalink":"http://wutianming.coding.me/about/index.html","excerpt":"","keywords":null,"text":"About Me我是一个初中学生，对Linux、C语言很感兴趣，平时喜欢折腾ArchLinux。 本博客有两个站点，国内站点(Coding.me)请访问这里，国外站点(GitHub)在这里。现在 http://wutianming.cf 会自动将国内用户带至Coding站，将国外用户带至GitHub站。 我的另一个博客在WordPress站。WordPress站现已准备关停。 联系我： wtm@freenode.org WTM_Linux迷@tieba.baidu.com 2300281344@qq.com 15255337547@163.com wutianmingc@gmail.com WuTianming@github.com 下面是一个嵌入的 IRC 网页聊天客户端，你可以通过它联系我。","raw":null,"content":null},{"title":"categories","date":"2016-10-02T06:23:23.000Z","updated":"2016-10-02T06:23:39.244Z","comments":true,"path":"categories/index.html","permalink":"http://wutianming.coding.me/categories/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null},{"title":"tags","date":"2016-10-02T06:21:52.000Z","updated":"2016-10-02T06:22:44.187Z","comments":true,"path":"tags/index.html","permalink":"http://wutianming.coding.me/tags/index.html","excerpt":"","keywords":null,"text":"","raw":null,"content":null}],"posts":[{"title":"shu","slug":"shu","date":"2016-10-05T06:02:52.000Z","updated":"2016-10-05T06:06:35.827Z","comments":true,"path":"2016/10/05/shu/","link":"","permalink":"http://wutianming.coding.me/2016/10/05/shu/","excerpt":"数 / Shu问题描述将 N 个整数排成一行，每个整数 a[i]的值在(-10000 ≤ a[i] ≤ 10000)。然后从这一行数中进行取数，其规则是：可从这一行中的任何一个位置开始取数，到任何位置结束，但不能不取。找出一种取法，使得取得的和为最大，再找出一种取法，使得取得的和为最小。例如：N=4， 4 个数依次为：13，-6，7，-8 取得和为最大的是：13+(-6)+7=14 取得和为最小的是：-8。","keywords":null,"text":"数 / Shu问题描述将 N 个整数排成一行，每个整数 a[i]的值在(-10000 ≤ a[i] ≤ 10000)。然后从这一行数中进行取数，其规则是：可从这一行中的任何一个位置开始取数，到任何位置结束，但不能不取。找出一种取法，使得取得的和为最大，再找出一种取法，使得取得的和为最小。例如：N=4， 4 个数依次为：13，-6，7，-8 取得和为最大的是：13+(-6)+7=14 取得和为最小的是：-8。 输入格式第一行有一个整数 N，第二行为 N 个整数。 输出格式输出二行，第一行一个整数表示取得和的最大值，第二行一个整数表示取得和的最小值。 样例数据 shu.in shu.out 4 14 13 -6 7 -8 -8","raw":null,"content":null,"categories":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/categories/OI/"}],"tags":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/tags/OI/"},{"name":"Programming","slug":"Programming","permalink":"http://wutianming.coding.me/tags/Programming/"}]},{"title":"commend","slug":"commend","date":"2016-10-04T08:05:50.000Z","updated":"2016-10-04T08:06:34.347Z","comments":true,"path":"2016/10/04/commend/","link":"","permalink":"http://wutianming.coding.me/2016/10/04/commend/","excerpt":"","keywords":null,"text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;cmath&gt;#include &lt;string&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int n, m;int a[55][55];int b[55];int c[55];int main() &#123; freopen(\"commend.in\", \"r\", stdin); freopen(\"commend.out\", \"w\", stdout); scanf(\"%d%d\", &amp;n, &amp;m); for (int i = 1; i &lt;= n; i++) &#123; int id = 0; int cnt = 0; for (int j = 1; j &lt;= m; j++) &#123; scanf(\"%d\", &amp;a[i][j]); if (a[i][j] &gt; cnt) &#123; cnt = a[i][j]; id = j; &#125; &#125; b[i] = id; &#125; for (int i = 1; i &lt;= n; i++) &#123; c[b[i]]++; &#125; int id = 0; int cnt = 0; for (int i = 1; i &lt;= m; i++) &#123; if (c[i] &gt; cnt) &#123; cnt = c[i]; id = i; &#125; &#125; printf(\"%d\\n\", id); return 0;&#125;","raw":null,"content":null,"categories":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/categories/OI/"}],"tags":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/tags/OI/"},{"name":"Programming","slug":"Programming","permalink":"http://wutianming.coding.me/tags/Programming/"}]},{"title":"bomb","slug":"bomb","date":"2016-10-04T08:05:45.000Z","updated":"2016-10-04T08:05:45.316Z","comments":true,"path":"2016/10/04/bomb/","link":"","permalink":"http://wutianming.coding.me/2016/10/04/bomb/","excerpt":"","keywords":null,"text":"","raw":null,"content":null,"categories":[],"tags":[]},{"title":"product","slug":"product","date":"2016-10-03T15:23:19.000Z","updated":"2016-10-04T06:49:49.064Z","comments":true,"path":"2016/10/03/product/","link":"","permalink":"http://wutianming.coding.me/2016/10/03/product/","excerpt":"因子积 / Product问题描述YJC 想学习数论，但他连因子和怎么求都不知道，所以他决定先学习因子积。很快 YJC 就学会了怎么求因子积，于是他决定来考考你。当然，对于你来说求一个数的因子积实在是小菜一碟，所以他决定把问题变一变。 设 N=p1a1 × p2a2 × … × pmam， YJC 把 a1、a2、…、am 和 N%1998585857 的值告诉了你，现在他希望你告诉他 N2 的因子积%1998585857 的值是多少。","keywords":null,"text":"因子积 / Product问题描述YJC 想学习数论，但他连因子和怎么求都不知道，所以他决定先学习因子积。很快 YJC 就学会了怎么求因子积，于是他决定来考考你。当然，对于你来说求一个数的因子积实在是小菜一碟，所以他决定把问题变一变。 设 N=p1a1 × p2a2 × … × pmam， YJC 把 a1、a2、…、am 和 N%1998585857 的值告诉了你，现在他希望你告诉他 N2 的因子积%1998585857 的值是多少。 输入格式第一行包含两个整数 m 和 x，表示 a 的个数和 N%1998585857 的值。第二行包含 m 个整数，第 i 个整数表示 ai。 输出格式第一行一个整数，表示 N2 的因子积%1998585857 的值。 数据样例 product.in product.out 2 6 10077696 1 1 数据说明对于 10%的数据，满足 m=0。对于 30%的数据，满足 n=1 且存在一个 N=x。对于 100%的数据，满足 1≤m≤1000000，0≤x","raw":null,"content":null,"categories":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/categories/OI/"}],"tags":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/tags/OI/"},{"name":"Programming","slug":"Programming","permalink":"http://wutianming.coding.me/tags/Programming/"}]},{"title":"addone","slug":"addone","date":"2016-10-03T14:38:05.000Z","updated":"2016-10-03T15:09:51.795Z","comments":true,"path":"2016/10/03/addone/","link":"","permalink":"http://wutianming.coding.me/2016/10/03/addone/","excerpt":"加一 / Addone问题描述你的任务是很简单，给你一个非负整数 N，输出 N+1。唯一的复杂之处在于给出的整数是一个 2~36 进制（包括边界）中一个未知进制的整数（大家知道的，从 10 开始的数字分别用 A，B，C……来表示）。因此，你的程序必须按字典序递增输出所有可能的结果。","keywords":null,"text":"加一 / Addone问题描述你的任务是很简单，给你一个非负整数 N，输出 N+1。唯一的复杂之处在于给出的整数是一个 2~36 进制（包括边界）中一个未知进制的整数（大家知道的，从 10 开始的数字分别用 A，B，C……来表示）。因此，你的程序必须按字典序递增输出所有可能的结果。 输入格式一行，包含一个由数字 0 至 9 与大写字母 A 至 Z 组成的整数 N，数据保证没有前导零。 输出格式输出所有的可能结果，每个结果占一行。 样例数据 addone1.in addone1.out 32 33 addone2.in addone2.out 9 10 A 我的渣题解 不会写，求助大神……","raw":null,"content":null,"categories":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/categories/OI/"}],"tags":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/tags/OI/"},{"name":"Programming","slug":"Programming","permalink":"http://wutianming.coding.me/tags/Programming/"}]},{"title":"gou","slug":"gou","date":"2016-10-02T09:08:05.000Z","updated":"2016-10-03T14:55:36.184Z","comments":true,"path":"2016/10/02/gou/","link":"","permalink":"http://wutianming.coding.me/2016/10/02/gou/","excerpt":"苟 / Gou问题描述苟先生有一个字符串，不过他的朋友富先生对他的字符串做了一些小手脚，不仅打乱了顺序而且还把一些字符变成了 “*” ，而且这个字符串混进了一大堆字符串中。苟先生想知道哪些可能是他的字符串。","keywords":null,"text":"苟 / Gou问题描述苟先生有一个字符串，不过他的朋友富先生对他的字符串做了一些小手脚，不仅打乱了顺序而且还把一些字符变成了 “*” ，而且这个字符串混进了一大堆字符串中。苟先生想知道哪些可能是他的字符串。 输入格式第一行一个整数 n 表示字符串长度。第二行一个只含小写字母的长度为 n 的字符串表示苟先生的串。第三行一个整数 m 表示混进的字符串数量。接下来 m 行每行一个长度为 n 的字符串，包含小写字母和“*”。 输出格式输出一行一个 m 位的二进制数，如果第 i 个字符串可能是苟先生的，第 i 位就为 1，否则为 0。 样例数据 gou.in gou.out 3 101 aba 3 aab bb* a** 数据范围对于 40%的数据不含“*”;对于 100%的数据 n，m≤100。 我的渣题解12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;cmath&gt;#include &lt;string&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int n, m;char org[105];char str[105];int cnt;bool cmp(char a, char b) &#123; if (a == '*') return false; if (b == '*') return true; // 星号排在后面 return a &lt; b;&#125;bool strEqualWithAsterisks(const char *a, const char *b) &#123; int i, j; for (i = 0, j = 0; i &lt; n; i++) &#123; if (a[i] != b[j]) &#123; if (cnt) &#123; cnt--; continue; &#125; else &#123; return false; &#125; &#125; j++; &#125; return true;&#125;int main() &#123; freopen(\"gou.in\", \"r\", stdin); freopen(\"gou.out\", \"w\", stdout); scanf(\"%d\", &amp;n); scanf(\"%s\", org); sort(org, org + n, cmp); scanf(\"%d\", &amp;m); for (int i = 1; i &lt;= m; i++) &#123; cnt = 0; scanf(\"%s\", str); sort(str, str + n, cmp); for (int k = 0; k &lt; n; k++) if (str[k] == '*') cnt++; if (strEqualWithAsterisks(org, str)) &#123; printf(\"1\"); &#125; else &#123; printf(\"0\"); &#125; &#125; return 0;&#125;","raw":null,"content":null,"categories":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/categories/OI/"}],"tags":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/tags/OI/"},{"name":"Programming","slug":"Programming","permalink":"http://wutianming.coding.me/tags/Programming/"}]},{"title":"tree","slug":"tree","date":"2016-10-02T08:54:41.000Z","updated":"2016-10-02T10:08:28.766Z","comments":true,"path":"2016/10/02/tree/","link":"","permalink":"http://wutianming.coding.me/2016/10/02/tree/","excerpt":"构建二叉树 / Tree问题描述树的表示方法很多，可以采用自然界的树形表示法，也可以采用括号表示法：先将根结点放入一对圆括号中，然后把它的子树按由左往右的顺序放入括号中，而对子树也采用同样的方法处理。同层子树与它的根结点用圆括号扩起来，同层子树之间用逗号格开，最后用闭括号括起来。如图所示的树可以表示成:(1(2(4,5),3))。由完全二叉树的定义我们可知，如果知道该完全二叉树的结点个数，则可以构建出一棵确定的完全二叉树，现在输入完全二叉树的结点数 N(N≤214)，用括号表示法输出这棵树。（默认树的结点名称为树结点的编号。）","keywords":null,"text":"构建二叉树 / Tree问题描述树的表示方法很多，可以采用自然界的树形表示法，也可以采用括号表示法：先将根结点放入一对圆括号中，然后把它的子树按由左往右的顺序放入括号中，而对子树也采用同样的方法处理。同层子树与它的根结点用圆括号扩起来，同层子树之间用逗号格开，最后用闭括号括起来。如图所示的树可以表示成:(1(2(4,5),3))。由完全二叉树的定义我们可知，如果知道该完全二叉树的结点个数，则可以构建出一棵确定的完全二叉树，现在输入完全二叉树的结点数 N(N≤214)，用括号表示法输出这棵树。（默认树的结点名称为树结点的编号。） 输入格式N 完全二叉树的结点个数。 输出格式N 个结点的完全二叉树的括号表示。 样例数据 tree.in tree.out 5 (1(2(4,5),3)) 我的渣题解123456789101112131415161718192021222324252627282930313233#include &lt;cmath&gt;#include &lt;string&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int n;void dfs(int id) &#123; if (id &gt; n) return; printf(\"%d\", id); if (id * 2 &lt;= n || id * 2 + 1 &lt;= n) &#123; printf(\"(\"); if (id * 2 &lt;= n) dfs(id * 2); if (id * 2 &lt;= n &amp;&amp; id * 2 + 1 &lt;= n) printf(\",\"); if (id * 2 + 1 &lt;= n) dfs(id * 2 + 1); printf(\")\"); &#125;&#125;int main() &#123; freopen(\"tree.in\", \"r\", stdin); freopen(\"tree.out\", \"w\", stdout); scanf(\"%d\", &amp;n); printf(\"(\"); dfs(1); printf(\")\"); return 0;&#125;","raw":null,"content":null,"categories":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/categories/OI/"}],"tags":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/tags/OI/"},{"name":"Programming","slug":"Programming","permalink":"http://wutianming.coding.me/tags/Programming/"}]},{"title":"matrix","slug":"matrix","date":"2016-10-02T06:41:30.000Z","updated":"2016-10-02T10:08:08.942Z","comments":true,"path":"2016/10/02/matrix/","link":"","permalink":"http://wutianming.coding.me/2016/10/02/matrix/","excerpt":"矩阵模拟 / Matrix问题描述给出 2 个大小相同的矩阵方阵 A 和 B，方阵中的元素为 0 或 1。若 A 和 B 相似，则它们满足下面条件: 情况 输出 A=B 0 A 经过顺时针旋转 90° 成为 B 1 A 经过顺时针旋转 180° 成为 B 2 A 经过顺时针旋转 270° 成为 B 3 A, B 不相似 -1","keywords":null,"text":"矩阵模拟 / Matrix问题描述给出 2 个大小相同的矩阵方阵 A 和 B，方阵中的元素为 0 或 1。若 A 和 B 相似，则它们满足下面条件: 情况 输出 A=B 0 A 经过顺时针旋转 90° 成为 B 1 A 经过顺时针旋转 180° 成为 B 2 A 经过顺时针旋转 270° 成为 B 3 A, B 不相似 -1 输入格式第一行为一个整数 n；接下来的 n 行表示 A 矩阵的 01 方阵；再接下来的 n 行表示 B 矩阵的 01 方阵。 输出格式一个整数（0，或 1，或 2，或 3，或 -1）即 A, B 相似的结果。 数据样例 matrix.in matrix.out 4 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 数据范围100%的数据：1≤n≤20。 我的渣题解123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;cmath&gt;#include &lt;string&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;int n;int a[25][25], a90[25][25], a180[25][25], a270[25][25], b[25][25];int main() &#123; freopen(\"matrix.in\", \"r\", stdin); freopen(\"matrix.out\", \"w\", stdout); scanf(\"%d\", &amp;n); int tmp; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= n; j++) &#123; scanf(\"%d\", &amp;tmp); a[i][j] = tmp; a90[j][n - i + 1] = tmp; a180[n - i + 1][n - j + 1] = tmp; a270[n - j + 1][i] = tmp; &#125; &#125; bool equal = true, equal90 = true, equal180 = true, equal270 = true; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= n; j++) &#123; scanf(\"%d\", &amp;tmp); if (a[i][j] != tmp) equal = false; if (a90[i][j] != tmp) equal90 = false; if (a180[i][j] != tmp) equal180 = false; if (a270[i][j] != tmp) equal270 = false; &#125; &#125; if (equal) &#123; printf(\"0\\n\"); &#125; else if (equal90) &#123; printf(\"1\\n\"); &#125; else if (equal180) &#123; printf(\"2\\n\"); &#125; else if (equal270) &#123; printf(\"3\\n\"); &#125; else &#123; printf(\"-1\\n\"); &#125; return 0;&#125;","raw":null,"content":null,"categories":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/categories/OI/"}],"tags":[{"name":"OI","slug":"OI","permalink":"http://wutianming.coding.me/tags/OI/"},{"name":"Programming","slug":"Programming","permalink":"http://wutianming.coding.me/tags/Programming/"}]},{"title":"example","slug":"example","date":"2016-10-01T07:50:04.000Z","updated":"2016-10-02T10:09:01.926Z","comments":true,"path":"2016/10/01/example/","link":"","permalink":"http://wutianming.coding.me/2016/10/01/example/","excerpt":"标题1标题2标题3标题4标题5标题6","keywords":null,"text":"标题1标题2标题3标题4标题5标题6 引用 1234// 代码段int main() &#123; return 0;&#125; 正文 删除 粗体 斜体","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://wutianming.coding.me/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://wutianming.coding.me/tags/Hexo/"}]},{"title":"Linux 全教程","slug":"IntroToLinux","date":"2016-05-27T15:13:10.000Z","updated":"2016-10-02T10:07:32.042Z","comments":true,"path":"2016/05/27/IntroToLinux/","link":"","permalink":"http://wutianming.coding.me/2016/05/27/IntroToLinux/","excerpt":"Linux 全教程 · 目录 I 目录 II 关于我 0 前言 1 小白入门常识 2 Linux 简介 2.1 是什么 2.2 有啥用 3 尝试 Linux 3.1 选择发行版 3.1.1 发行版的概念 3.1.2 选择你适合的发行版 3.2 下载发行版 3.3 安装系统 3.3.1 ubuntu","keywords":null,"text":"Linux 全教程 · 目录 I 目录 II 关于我 0 前言 1 小白入门常识 2 Linux 简介 2.1 是什么 2.2 有啥用 3 尝试 Linux 3.1 选择发行版 3.1.1 发行版的概念 3.1.2 选择你适合的发行版 3.2 下载发行版 3.3 安装系统 3.3.1 ubuntu 关于我本人是学生，一开始接触了 C 语言，由于搞 OI ，尝试了下 Linux ，结果一发不可收拾。 也许我自己对 Linux 的了解也不够深，但是作为一个一年之内从小白成长到能够熟练使用 Linux 的 ArchUser ，我认为我的经验还是能够给大家作参考的。大神喷轻点儿 本文中的概念都不是很专业，也许我的用词也不够准确（因为都是我根据自己的理解写出来的），但是只要小白能看懂，本文的目标就达到了。 前言 最近发现很多人想要了解 Linux （大多是搞OI的），但对 Linux 的了解却非常少，甚至有人让我“把安装包发给他”。我实在看不下去了… 为了改变这个现状，我于是开始写这个小白教程，目的是让小白们对 Linux 有更深的了解，并且能够做到安装、使用 Linux 。 文章是为小白准备的，会补充一些堆基本常识，电脑大神自动略过。也许这篇文章会变成一篇很长的长篇大论，就看我有没有本事写那么多了（233）。 本教程由吴天铭原创编写，转载请注明出处。 1 小白入门常识// TODO: 电脑分区，分区表，启动（MBR -&gt; SYS），系统的概念 2 Linux 简介百度百科 · Linux说得非常清楚的简介 2.1 是什么Linux 是一个操作系统内核，是一个操作系统最为重要的组件。它并不是一个完整的系统。 Linux 操作系统（指任何一个使用 Linux 内核的发行版）是可以免费使用和自由传播的类 Unix 操作系统。 请注意，与 Windows 不同， Linux 仅仅是一个内核，而不是一种能够直接使用的操作系统。这个内核是不包含用户界面的，不能直接由用户操作。 2.2 有啥用Linux 作为一个内核，它对用户是不露面的。它只顾在后台静静地处理自己的任务，比如把程序加载进内存，把进程平等地分配给 CPU 处理，等等。 Linux 内核的运作，我们普通用户没必要了解。我们只需要知道，有了 Linux 内核， Linux 软件就能够在电脑上运行，也就有了各种各样的、易于使用的发行版了。 3 尝试 Linux首先，我要试一下～～ 3.1 选择发行版要想尝试 Linux ，首先要选择一个适合自己的发行版，这一点犹为重要。 3.1.1 发行版的概念我们现在在网上能够看到的 Linux 系统，通常是指 Linux 发行版。那么“Linux 发行版”又是什么呢？ Linux 是一个系统内核，只负责处理系统内部事务，无法直接由用户掌管。一个完整的、能与用户进行交互的 Linux 操作系统，其组件除了 Linux 内核以外，还有大量的软件包。这些软件包有些负责处理硬件（如管理网卡），有些负责处理用户界面（如提供命令行交互系统、图形界面交互系统等）；还有一些不是可以直接运行的软件，而是作为其它软件的依赖库。由于 Linux 内核、标准依赖库更新频繁，不同的硬件的可执行文件格式也不一样，这些软件包无法做成统一的安装包（或安装程序）的形式，只能从源代码编译安装（以保证软件在自己的电脑上能够正常运行），极其麻烦，耗时耗力，常常把用户搞得心力交猝。最可怕的是， Linux 内核可不包含编译器，这就意味着，你必须要先得到编译器才能够安装其它软件；可是，编译器也需要编译安装…… 太可怕了！ 于是，有些懒人们就创建了 Linux 发行版。他们把 Linux 内核与系统工具、用户界面和一些预装软件打包在一起，做成了易于使用的操作系统，还给它起了好听的名字。比如，现在很火的 ubuntu ，Geek 们十分喜爱的 ArchLinux 和 Gentoo ，还有经久不衰的红帽子（Redhat）…… 多了去了！ 为了解决软件全都要编译安装的问题，发行版通常会配备一个专用的软件源，也就是一个放有大量软件包的专用服务器。这些软件包是已经由源代码编译好的，并且确认了可以在目标发行版中完美运行。可以这样说：有了软件源，就相当于有了一个全免费、全自动、真·良心的应用商场，再也不需要搜遍百度找软件了。 3.1.2 选择你适合的发行版// TODO: 介绍几个常用发行版 3.2 下载发行版// 先放个链接ubuntu -&gt; http://www.ubuntu.comArchLinux -&gt; https://www.archlinux.org 3.3 安装系统下载到系统镜像之后，我们进入安装进程。 3.3.1 ubuntu由于 ubuntu 是现今比较流行、号称“对用户炒鸡友好”的一个发行版，我先来介绍它的安装过程。 警告：安装不成功，请勿轻易格盘！请务必读完。我的操作系统是 ArchLinux ，为了提供 Windows 系统的截图，我使用了虚拟机，所以很多地方会不一样，请以实际情况为准！此处你应该使用 Windows 进行操作！这里是实体机安装，非虚拟机！不要照葫芦画瓢地跟着操作，我这里也可能会有误！务必理解操作的目的，忌盲目跟从。 Step 1 -&gt; 安装前 安装之前，我们要作些配置，使得我们的电脑能够装得下 ubuntu 系统。 首先，我们要确认磁盘剩余空间足够（这个都会吧）。接着，我们要对计算机磁盘进行分区，分出一块空白空间供 ubuntu 使用。 按下 Win+R 键，会弹出一个“运行”窗口。输入 diskmgmt.msc ，按下回车键，稍等片刻将会弹出一个 Windows 自带的磁盘管理器。Windows 自带的 DiskManager 仅在 Windows7 及以上版本中拥有分区功能。若你使用 XP 或者更老，你可以考虑使用 DiskGenius，在这里不说了。 你可以看到，我的虚拟机只有一个分区，就是 C: 盘。你的电脑一般会有四个分区，第一个（C:）是主分区；剩余部分是一个大的扩展分区，这个扩展分区中又包含了三个小的逻辑分区（D: E: F:）。 主分区也被称为“引导分区”，因为它拥有分区引导记录，直接控制着系统的启动，所以你不能随意动它。那么，我们就找一个能够分的分区切割一下。比如说，你的 F: 盘剩余空间很大（ubuntu 要求至少 15GB 左右来保证正常使用），你就可以切分 F: 盘的空间。 啊… ╮(￣▽￣)╭ 我的虚拟机也是 XP，没有切割分区功能，这里也不截图了。正确的姿势应该是：通过菜单中的调整分区大小操作，将一个逻辑分区的大小改小，就能留出一块空余空间。空出来的空间不要管它，就让它先空着。","raw":null,"content":null,"categories":[{"name":"Linux","slug":"Linux","permalink":"http://wutianming.coding.me/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://wutianming.coding.me/tags/Linux/"},{"name":"小白","slug":"小白","permalink":"http://wutianming.coding.me/tags/小白/"}]},{"title":"大家来聊天","slug":"大家来聊天","date":"2016-05-21T14:50:04.000Z","updated":"2016-05-21T14:51:31.101Z","comments":true,"path":"2016/05/21/大家来聊天/","link":"","permalink":"http://wutianming.coding.me/2016/05/21/大家来聊天/","excerpt":"","keywords":null,"text":"这篇文章只是无聊。大家可以使用本文章下部的评论功能进行聊天。仅此而已。","raw":null,"content":null,"categories":[],"tags":[{"name":"Chat","slug":"Chat","permalink":"http://wutianming.coding.me/tags/Chat/"}]},{"title":"我的GitHub博客正式上线了！","slug":"Ported-to-wutianming-cf","date":"2016-05-20T14:50:20.000Z","updated":"2016-10-02T16:02:12.576Z","comments":true,"path":"2016/05/20/Ported-to-wutianming-cf/","link":"","permalink":"http://wutianming.coding.me/2016/05/20/Ported-to-wutianming-cf/","excerpt":"","keywords":null,"text":"RT。这个博客是我使用 Hexo 搭建的，使用 Hueman 主题。（16.10.03）已改为 NexT.Mist。 效果很好，不是吗？ 本博客原位置位于 github.io，现在绑定到了一个很好记忆的域名上： wutianming.cf。 同时，我的另一个博客同样正在运行中。现已经准备关停此站。","raw":null,"content":null,"categories":[{"name":"Essays","slug":"Essays","permalink":"http://wutianming.coding.me/categories/Essays/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://wutianming.coding.me/tags/GitHub/"},{"name":"Hexo","slug":"Hexo","permalink":"http://wutianming.coding.me/tags/Hexo/"}]}]}